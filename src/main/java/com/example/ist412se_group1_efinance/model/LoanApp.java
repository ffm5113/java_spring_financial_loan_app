package com.example.ist412se_group1_efinance.model;

// import com.example.ist412se_group1_efinance.model.Loan;
// javax.persistence package imports
import javax.persistence.Entity;
import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.GenerationType;
import javax.persistence.GeneratedValue;
import javax.persistence.ManyToMany;
import javax.persistence.CascadeType;
import javax.persistence.JoinTable;
import javax.persistence.JoinColumn;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

@Entity // Create database entity
@Table(name="loanapp") // Use loanapp table in MySQL
public class LoanApp implements Serializable{
    @Id // MySQL table ID field
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long lAId; // Long ID is autogenerated
    @Column(name = "date")
    private String date;
    @Column(name = "principal")
    private Double principal;
    @Column(name = "apr")
    private Integer aPR;
    @Column(name = "term")
    private Integer term; // Integer can be null, int cannot
    @Column(name = "request_date")
    private String requestedStartDate; // Date customer would like loan to be disbursed to bank account
    @Column(name = "status")
    private String status = "Pending Review"; // Initialize all loan apps as pending
    @Column(name = "last_updated")
    private String dateOfLastUpdate = "Not yet processed"; // Initialize date string as not processed

    // Initialize as 0 for unprocessed loan apps, and then set to personnel id once personnel processes loan app
    @Column(name ="personnel_id")
    private long personnelId = 0;
    public long getPersonnelId() { return personnelId;}
    public void setPersonnelId(long loanAppPersonnelId) { this.personnelId = loanAppPersonnelId;}

    @Column(name ="approved_personnel_id")
    private long approvedPersonnelId = 0;
    public long getApprovedPersonnelId() { return approvedPersonnelId;}
    public void setApprovedPersonnelId(long loanProcessedPersonnelId) {
        this.approvedPersonnelId = loanProcessedPersonnelId;
    }

    @Column(name = "income")
    private Integer income;
    public Integer getIncome() { return income;}
    public void setIncome(Integer loanAppIncome) { this.income = loanAppIncome;}
    public void calculateLoanAppIncome() {
        Integer calculatedIncome = 0;
        for(Customer c : this.getCustomers()) {
            calculatedIncome += c.getIncome();
        }
        setIncome(calculatedIncome);
    }

    // Customers can have many loan apps.// Loans apps can have many customers (cosigners)
    @ManyToMany(cascade = CascadeType.MERGE)
    @JoinTable(name = "loanapp_customer",
            joinColumns = {@JoinColumn(name = "loan_app_id")}, // Loan app ID
            inverseJoinColumns = {@JoinColumn(name = "customer_id")}) // customer ID
    public Set<Customer> customers = new HashSet<>();

    public long getlAId() { return lAId;}
    public void setlAId(long loanAppId) {this.lAId = loanAppId;}

    public String getDate() { return date;}
    public void setDate(String loanAppDate) { this.date = loanAppDate;}

    public Double getPrincipal() { return principal;}
    public void setPrincipal(Double loanPrincipal) { this.principal = loanPrincipal;}

    public Integer getAPR() { return aPR;}
    public void setAPR(Integer loanAPR) { this.aPR = loanAPR;}

    public Integer getTerm() { return term;}
    public void setTerm(Integer loanTerm) { this.term = loanTerm;}

    public String getRequestedStartDate() { return requestedStartDate;}
    public void setRequestedStartDate(String loanAppRequestedStartDate) {
        this.requestedStartDate = loanAppRequestedStartDate;
    }

    public String getStatus() { return status;}
    public void setStatus(String loanAppStatus) { this.status = loanAppStatus;}

    public Set<Customer> getCustomers() { return customers;}
    public void setCustomers(Set<Customer> customers) { this.customers = customers;}

    public String getDateOfLastUpdate() { return dateOfLastUpdate;}
    public void setDateOfLastUpdate(String loanAppDateProcessed) {
        this.dateOfLastUpdate = loanAppDateProcessed;}

    public Customer getPrimaryCustomer() {
        ArrayList<Customer> customerArrayList = new ArrayList<>(getCustomers());
        return customerArrayList.get(0);
    }

    public String customerIds() {
        String customerIds = "";
        for(Customer c : getCustomers()) {
            customerIds += c.getcId() + " ";
        }
        return customerIds;
    }

    public String getDoubleWithTwoDecimals(Double doubleValue) {
        return ("").format("%,.2f" , doubleValue);} // Format doubles with commas and decimal point
    @Override
    public String toString() {
        String loanAppString = "Loan App ID: " + this.getlAId() + "\n" +
                "Loan App Principal: " + this.getPrincipal() + "\n" +
                "Loan App Date: " + this.getDate() + "\n" +
                "Loan App APR: " + this.getAPR() + "\n" +
                "Loan App Term: " + this.getTerm() + "\n" +
                "Loan App Requested Start Date: " + this.getRequestedStartDate() + "\n" +
                "Loan App Status: " + this.getStatus() + "\n" +
                "Loan App Get Customers: " + this.getCustomers() + "\n" +
                "Loan App Get Primary Customer: " + this.getPrimaryCustomer() + "\n" +
                "Loan App Personnel ID: " + this.getPersonnelId() + "\n" +
                "Loan Processed Personnel ID: " + this.getApprovedPersonnelId() + "\n" +
                "Loan App Income: " + this.getIncome() + "\n" +
                "Loan App Date of Last Update: " + this.getDateOfLastUpdate();
        return loanAppString;
    }
}
